name: Terraform CI/CD

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - dev
      - staging
      - prod

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  STORAGE_ACCOUNT_CONTAINER: ${{ secrets.STORAGE_ACCOUNT_CONTAINER }}
  RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

jobs:
  validate:
    name: Terraform Validate and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Install TFSec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: TFLint
        run: tflint

      - name: Tfsec (Security Check)
        run: tfsec .
  deploy:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging' || (github.ref == 'refs/heads/prod' && github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.STORAGE_ACCOUNT_CONTAINER }}" -backend-config="key=${{ github.ref_name }}.terraform.tfstate" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply (Non-Prod)
        if: github.ref_name != 'prod'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Apply (Prod - Requires Approval)
        if: github.ref_name == 'prod'
        run: |
          echo "Manual approval required for production deployment."
          echo "Review the Terraform plan before applying."
