name: Terraform CI/CD

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - dev
      - staging
      - prod
  workflow_dispatch: # Allows manual triggering from the GitHub Actions interface

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  # NOT IN USE? :
  STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  STORAGE_ACCOUNT_CONTAINER: ${{ secrets.STORAGE_ACCOUNT_CONTAINER }}
  # STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  # STORAGE_ACCOUNT_CONTAINER: ${{ secrets.STORAGE_ACCOUNT_CONTAINER }}
  # RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
  PROJECT_NAME: "akseles-operaterra"

jobs:
  validate:
    name: Terraform Validate and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Install TFSec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: TFLint
        run: tflint

      - name: Tfsec (Security Check)
        run: tfsec .

  deploy:
    name: Terraform Global and Environment Deployments
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # - name: Import Resource Group (if exists)
      #   run: |
      #     terraform -chdir=global import azurerm_resource_group.rg /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }} || echo "Resource group already imported or not required."

      # Step 1: Global Infrastructure Deployment
      - name: Terraform Init for Global
        run: terraform -chdir=global init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.STORAGE_ACCOUNT_CONTAINER }}" -backend-config="key=${{ github.ref_name }}.terraform.tfstate" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}"

      # - name: Terraform Plan for Global
      #   run: terraform -chdir=global plan -var="environment=${{ github.ref_name }}" -var="project_name=${{ env.PROJECT_NAME }}" -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -out=tfplan-global

      - name: Terraform Plan for Global
        run: terraform -chdir=global plan -var="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}" -var="tenant_id=${{ env.ARM_TENANT_ID }}" -var="client_id=${{ env.ARM_CLIENT_ID }}" -var="client_secret=${{ env.ARM_CLIENT_SECRET }}" -var="state_storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -var="state_container_name=${{ env.STORAGE_ACCOUNT_CONTAINER }}" -var="environment=${{ github.ref_name }}" -var="project_name=${{ env.PROJECT_NAME }}" -out=tfplan-global

      - name: Terraform Apply for Global
        run: terraform -chdir=global apply -auto-approve tfplan-global

      # Step 2: Environment-Specific Deployment (Deployments Directory)
      # - name: Terraform Init for Deployments
      #   run: terraform -chdir=deployments init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.STORAGE_ACCOUNT_CONTAINER }}" -backend-config="key=${{ github.ref_name }}.terraform.tfstate" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}"

      # - name: Terraform Plan for Deployments
      #   run: terraform -chdir=deployments plan -var="environment=${{ github.ref_name }}" -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -out=tfplan -var-file="terraform.tfvars.${{ github.ref_name }}"

      # - name: Terraform Apply for Deployments (Non-Prod)
      #   if: github.ref_name != 'prod'
      #   run: terraform -chdir=deployments apply -auto-approve tfplan

      # - name: Terraform Apply for Deployments (Prod - Requires Approval)
      #   if: github.ref_name == 'prod'
      #   run: |
      #     echo "Manual approval required for production deployment."
      #     echo "Review the Terraform plan before applying."
# ASDF
